%h2 In Depth

.contents
  .bullet
    .description
      Read the manual for an in-depth discussion of all of the options available in the
      <code>Gemfile</code> and how to use them.
    = link_to 'Gemfile manual', '/man/gemfile.5.html'

%h2 Gemfiles

.contents
  .bullet
    .description
      Gemfiles require at least one gem source, in the form of the URL for a RubyGems server.
      There are shortcuts for the default gem server, so all of these sources are the same.
    :code
      # lang: ruby
      source :rubygems
      source 'https://rubygems.org'
      source :rubyforge
      source 'http://gems.rubyforge.org'
      source :gemcutter
      source 'http://gemcutter.org'

  .bullet
    .description
      Declare the gems that you need, including version numbers. Specify versions using the same
      syntax that RubyGems supports for dependencies.
    :code
      # lang: ruby
      gem 'nokogiri'
      gem 'rails', '3.0.0.beta3'
      gem 'rack',  '>=1.0'
      gem 'thin',  '~>1.1'
    .notes
      Most of the version specifiers, like <code>>= 1.0</code>, are self-explanatory.
      The specifier <code>~></code> has a special meaning, best shown by example.
      <code>~> 2.0.3</code> is identical to <code>>= 2.0.3</code> and <code>< 2.1</code>.
      <code>~> 2.1</code> is identical to <code>>= 2.1</code> and <code>< 3.0</code>.
      <code>~> 2.2.beta</code> will match prerelease versions like <code>2.2.beta.12</code>.
    = link_to 'RubyGems version specifiers', 'http://guides.rubygems.org/patterns/#pessimistic-version-constraint'

  .bullet
    .description
      If a gem's main file is different than the gem name, specify how to require it.
    :code
      # lang: ruby
      gem 'rspec', :require => 'spec'
      gem 'sqlite3'
    .notes
      In order to require gems in your <code>Gemfile</code>, you will need to call
      <code>Bundler.require</code> in your application.
    = link_to 'Learn More: Bundler.require', './groups.html'

  .bullet
    .description
      Git repositories are also valid gem sources, as long as the repo contains one or
      more valid gems. Specify what to check out with <code>:tag</code>,
      <code>:branch</code>, or <code>:ref</code>. The default is the <code>master</code> branch.
    :code
      # lang: ruby
      gem 'nokogiri', :git => 'https://github.com/tenderlove/nokogiri.git', :branch => '1.4'

      git 'https://github.com/wycats/thor.git', :tag => 'v0.13.4'
      gem 'thor'
    .notes
      If the git repository does not contain a <code>.gemspec</code> file, bundler
      will create a simple one, without any dependencies, executables or C extensions.
      This may work for simple gems, but not work for others. If there is no .gemspec,
      you probably shouldn't use the gem from git.
    = link_to 'Learn more: Git', './git.html'

  .bullet
    .description
      If you are actively developing a gem, perhaps checked out from Github, you can use the gem
      directly from its directory on your filesystem.
    :code
      # lang: ruby
      gem 'nokogiri', :path => '~/sw/gems/nokogiri'

  .bullet
    .description
      Dependencies can be placed into groups, to be ignored at install-time or required all at once.
    :code
      # lang: ruby
      gem 'wirble', :group => :development
      gem 'ruby-debug', :group => [:development, :test]

      group :test do
        gem 'rspec'
      end
    = link_to 'Learn more: Groups', './groups.html'
